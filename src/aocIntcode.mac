ROUTINE aocIntcode

Go(Memory,ReadString,HaltOnWrite,Position)[]PUBLIC
{
    SET position=$get(Position,0),HaltOnWrite=$Get(HaltOnWrite,0),readPointer=1,ReadString=$Get(ReadString,""),toRead=0,halt=0
    If ReadString'="" {
        Set toRead=1
    }    
    SET instruction=$$ParseInstruction(Memory(position),.m1,.m2,.m3)
    WHILE instruction'=99,halt=0 {
        IF instruction=1 {
            SET position=$$Sum(position,.Memory,m1,m2)
        } ELSEIF instruction=2 {
            SET position=$$Multiply(position,.Memory,m1,m2)
        } ElseIf instruction=3 {
            Set value=""
            If ReadString'="" {
                ;w !,"RE1:",ReadString,"*",!
                Set value=$Piece(ReadString,"/")
                Set ReadString=$Piece(ReadString,"/",2,$Length(ReadString,"/"))
                ;w !,"RE2:",ReadString,"*",*9,value,!
            }            
            Set position=$$Read(position,.Memory,value)
        }	ElseIf instruction=4 {                 
            If toRead {
                Set position=$$Write(position,.Memory,m1,toRead,.ReadString)                
            } Else {
                Set position=$$Write(position,.Memory,m1,)  
            }           
            If HaltOnWrite {
                Set halt=1
            }
              
        } ElseIf instruction=5 {
            Set position=$$JumpIfTrue(position,.Memory,m1,m2)
        } ElseIf instruction=6 {
            Set position=$$JumpIfFalse(position,.Memory,m1,m2)
        } ElseIf instruction=7 {
            Set position=$$Less(position,.Memory,m1,m2)
        } ElseIf instruction=8 {
            Set position=$$Equal(position,.Memory,m1,m2)
        }
        SET instruction=$$ParseInstruction(Memory(position),.m1,.m2,.m3)
    }
    If instruction=99 {
        Kill Memory
    }    
    Quit position
}

ParseInstruction(Instruction,M1,M2,M3){
    Set Instruction=100000+Instruction
    Set M3=$e(Instruction,2)
    Set M2=$e(Instruction,3)
    Set M1=$e(Instruction,4)
    Quit +$e(Instruction,5,*)
}

Sum(CurrentPosition,Memory,M1,M2){
    Set M1=$Get(M1,0),M2=$Get(M2,0)
    SET posval1=Memory(CurrentPosition+1),posval2=Memory(CurrentPosition+2),target=Memory(CurrentPosition+3)
    if M1=0 {
        SET val1=Memory(posval1)
    } Else {
        Set val1=posval1
    }
    if M2=0 {
        Set val2=Memory(posval2)
    } Else {
        Set val2=posval2
    }    
    Set Memory(target)=val1+val2
    Quit CurrentPosition+4
}
Multiply(CurrentPosition,Memory,M1,M2){
    Set M1=$Get(M1,0),M2=$Get(M2,0)
    SET posval1=Memory(CurrentPosition+1),posval2=Memory(CurrentPosition+2),target=Memory(CurrentPosition+3)
    if M1=0 {
        SET val1=Memory(posval1)
    } Else {
        Set val1=posval1
    }
    if M2=0 {
        Set val2=Memory(posval2)
    } Else {
        Set val2=posval2
    }
    Set Memory(target)=val1*val2
    Quit CurrentPosition+4
}
Read(CurrentPosition,Memory,Value){
    If Value="" {
        Write !,"Read: "
        Read xx        
    } else {
        Set xx=Value
    }    
    Set target=Memory(CurrentPosition+1)
    Set Memory(target)=xx
    q CurrentPosition+2
}
Write(CurrentPosition,Memory,M1,ToRead,ReadString){
    Set ToRead=$g(ToRead,0),ReadString=$Get(ReadString,"")
    SET posval1=Memory(CurrentPosition+1)
    if M1=0 {
        set value=Memory(posval1)
    } else{
        set value=posval1
    }
    If 'ToRead {
        w !,value
    } Else {
        If ReadString'="" {
            Set ReadString=value_"/"_ReadString            
        } Else {
            set ReadString=value
        }
    }
    
    
    q CurrentPosition+2
}
JumpIfFalse(CurrentPosition,Memory,M1,M2){
    Set M1=$Get(M1,0),M2=$Get(M2,0)
    SET posval1=Memory(CurrentPosition+1),posval2=Memory(CurrentPosition+2)
    if M1=0 {
        SET val1=Memory(posval1)
    } Else {
        Set val1=posval1
    }
    if M2=0 {
        Set val2=Memory(posval2)
    } Else {
        Set val2=posval2
    }
    If val1=0 {
        Set CurrentPosition=+val2
    } else {
        set CurrentPosition=CurrentPosition+3
    }   
    q CurrentPosition 
}
JumpIfTrue(CurrentPosition,Memory,M1,M2){
    Set M1=$Get(M1,0),M2=$Get(M2,0)
    SET posval1=Memory(CurrentPosition+1),posval2=Memory(CurrentPosition+2)
    if M1=0 {
        SET val1=Memory(posval1)
    } Else {
        Set val1=posval1
    }
    if M2=0 {
        Set val2=Memory(posval2)
    } Else {
        Set val2=posval2
    }
    If val1'=0 {
        Set CurrentPosition=val2
    } else {
        set CurrentPosition=CurrentPosition+3
    }   
    q CurrentPosition 
}
Less(CurrentPosition,Memory,M1,M2){
    Set M1=$Get(M1,0),M2=$Get(M2,0)
    SET posval1=Memory(CurrentPosition+1),posval2=Memory(CurrentPosition+2),target=Memory(CurrentPosition+3)
    if M1=0 {
        SET val1=Memory(posval1)
    } Else {
        Set val1=posval1
    }
    if M2=0 {
        Set val2=Memory(posval2)
    } Else {
        Set val2=posval2
    }
    If val1<val2 {
        Set Memory(target)=1
    } Else {
        Set Memory(target)=0
    }
    Quit CurrentPosition+4
}
Equal(CurrentPosition,Memory,M1,M2){
    Set M1=$Get(M1,0),M2=$Get(M2,0)
    SET posval1=Memory(CurrentPosition+1),posval2=Memory(CurrentPosition+2),target=Memory(CurrentPosition+3)
    if M1=0 {
        SET val1=Memory(posval1)
    } Else {
        Set val1=posval1
    }
    if M2=0 {
        Set val2=Memory(posval2)
    } Else {
        Set val2=posval2
    }
    If val1=val2 {
        Set Memory(target)=1
    } Else {
        Set Memory(target)=0
    }
    Quit CurrentPosition+4
}